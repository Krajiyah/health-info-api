// DEPENDENCIES
const firebase = require("../util/firebase.js");
const PDFDocument = require("../util/pdf.js");
const mail = require("../util/mail.js");
const overrides = require("../util/overrides.js");
const Appointment = firebase.db.Appointment;
const User = require("../models/User.js");
const Institution = require("../models/Institution.js");

// CONSTANTS
const appName = "MySmartMedical";
const subjectText = `${appName} - Appointment Sign In`;
const appIcon = "./assets/app_icon.png";
const coverPageText =
  `This content was generated by ${appName} on behalf of the user`;

// PROTOTYPES
Appointment.prototype.signIn = async function() {
  let user = await User.getByKey(this.getValue().user);
  let institution = await Institution.getByKey(this.getValue().institution);
  let hasGeneralInfo = await user.hasGeneralInfo();
  let pages = [];
  if (hasGeneralInfo) {
    let generalInfo = await user.getGeneralInfo();
    let value = generalInfo.getValue();
    pages.push({
      title: "General Info",
      paragraphs: [
        `Date of Birth: ${value.dateOfBirth}`,
        `Sex: ${value.sex}`,
        `Marital Status: ${value.maritalStatus}`,
        `Occupation: ${value.occupation}`
      ]
    });
  }
  let hasLocationInfo = await user.hasLocationInfo();
  if (hasLocationInfo) {
    let locationInfo = await user.getLocationInfo();
    let value = locationInfo.getValue();
    pages.push({
      title: "Location Info",
      paragraphs: [
        `Address Line 1: ${value.addressLine1}`,
        `Address Line 2: ${value.addressLine2}`,
        `City: ${value.city}`,
        `State: ${value.state}`,
        `Zip Code: ${value.zipcode}`
      ]
    });
  }
  let hasEmergencyContact = await user.hasEmergencyContact();
  if (hasEmergencyContact) {
    let emergencyContact = await user.getEmergencyContact();
    let value = emergencyContact.getValue();
    pages.push({
      title: "Emergency Contact",
      paragraphs: [
        `Full Name: ${value.fullName}`,
        `Phone Number: ${value.phoneNumber}`,
        `Email: ${value.email}`
      ]
    });
  }
  let mh = await user.getMedicationHistory();
  if (mh.length > 0) {
    let p = [];
    mh.forEach(m => {
      p.push(`Type: ${m.type}`);
      p.push(`Amount: ${m.amount}`);
      p.push(`Frequency: ${m.frequency}`);
      p.push("");
    });
    pages.push({
      title: "Medication History",
      paragraphs: p
    });
  }
  if (user.medicalHistory && user.medicalHistory.length > 0) {
    pages.push({
      title: "Medical History",
      paragraphs: user.medicalHistory
    });
  }
  if (user.photoIdUrl) {
    pages.push({
      title: "Photo ID",
      paragraphs: [`Url: ${user.photoIdUrl}`]
    });
  }
  if (user.insuranceUrl) {
    pages.push({
      title: "Insurance",
      paragraphs: [`Url: ${user.insuranceUrl}`]
    });
  }
  let pdf = PDFDocument.genFormattedDoc(appIcon, coverPageText, pages);
  let text =
    `${user.firstName} ${user.lastName} has signed for ${this.name}. Attached is their medical information.`
  let email = institution.email;
  await mail.sendWithAttachment(email, subjectText, text, pdf);
  await this.update({
    signedIn: true
  });
}

// STATICS
Appointment.exists = async key => await Appointment.getKeysExist([key]);

Appointment.create = async params => {
  return await Appointment.createByAutoKey({
    user: params.user,
    institution: params.institution,
    name: params.name,
    time: params.time,
    signedIn: false
  });
}

Appointment.remind = async() => {
  let aList = await Appointment.getAllByFields({
    signedIn: false
  });
  await aList.forEachAsync(async a => {
    let uId = a.getValue().user;
    let u = await User.getByKey(uId);
    await u.sendNotification(`Your appointment ${a.name} is coming up.`);
  });
}

// EXPORTS
module.exports = Appointment;
